// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: common_user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommonUser = `-- name: CreateCommonUser :one
INSERT INTO common_user (full_name, cpf, email, cnpj)
values ($1, $2, $3, $4)
returning id, full_name, cpf, email, created_at, cnpj, deleted_at
`

type CreateCommonUserParams struct {
	FullName string      `json:"full_name"`
	Cpf      string      `json:"cpf"`
	Email    string      `json:"email"`
	Cnpj     pgtype.Text `json:"cnpj"`
}

func (q *Queries) CreateCommonUser(ctx context.Context, arg CreateCommonUserParams) (CommonUser, error) {
	row := q.db.QueryRow(ctx, createCommonUser,
		arg.FullName,
		arg.Cpf,
		arg.Email,
		arg.Cnpj,
	)
	var i CommonUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Email,
		&i.CreatedAt,
		&i.Cnpj,
		&i.DeletedAt,
	)
	return i, err
}

const getCommonUser = `-- name: GetCommonUser :one
SELECT id, full_name, cpf, email, created_at, cnpj, deleted_at
FROM common_user
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCommonUser(ctx context.Context, id int64) (CommonUser, error) {
	row := q.db.QueryRow(ctx, getCommonUser, id)
	var i CommonUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Email,
		&i.CreatedAt,
		&i.Cnpj,
		&i.DeletedAt,
	)
	return i, err
}

const getCommonUserByEmail = `-- name: GetCommonUserByEmail :one
SELECT id, full_name, cpf, email, created_at, cnpj, deleted_at
FROM common_user
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetCommonUserByEmail(ctx context.Context, email string) (CommonUser, error) {
	row := q.db.QueryRow(ctx, getCommonUserByEmail, email)
	var i CommonUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Email,
		&i.CreatedAt,
		&i.Cnpj,
		&i.DeletedAt,
	)
	return i, err
}
